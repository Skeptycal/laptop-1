#!/usr/bin/env bash

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

# shellcheck disable=SC2039
# shellcheck disable=SC2059

script_name="$0"

die() {
  # error trapping and reporting
  #   if args are set, report them
  #   else, report $? status
  ret=$?

  _name="$1"
  shift
  _line="$1"
  shift
  _message="$*"

  if [ -z "$_name" ]; then
    if test $ret -ne 0; then
      printf "%s\n" "$script_name failed: $ret" >&2;
    else
      printf "%s\n" "$script_name exiting ..." >&2;
    fi
  fi
  printf "%s\n" "$_name failed on line $_line: $_message" >&2
}
trap die EXIT

fancy_echo() {
  # more xxx output with optional formatting prefix
  #   $1  - text to output (required);
  #         becomes optional format if $# has additional args available
  #   $2+ - additional args
  #         (presence of these indicates $1 is a format string)
  if [ $# -gt 0 ]; then
    local fmt="$1"; shift
    printf "\\n${fmt}%s\\n" "$*"
  fi
}

append_to_zshrc() {
  # append line and optional blank line to .zshrc if not already present
  #   $1 - code to append (string: required)
  #   $2 - boolean [1 | 0] skip additional newline (default 0)

  if [ $# -lt 1 ]; then
    fancy_echo "Usage: append_to_zshrc TEXT [SKIP_NEWLINE] ..." >&2
    die "$0" "$LINENO" "Required parameters missing ..."
  else
    local text="$1" zshrc
    local skip_new_line="${2:-0}"

    if [ -w "$HOME/.zshrc.local" ]; then
      zshrc="$HOME/.zshrc.local"
    else
      zshrc="$HOME/.zshrc"
    fi

    if ! grep -Fqs "$text" "$zshrc"; then
      if [ "$skip_new_line" -eq 1 ]; then
        printf "%s\\n" "$text" >> "$zshrc"
      else
        printf "\\n%s\\n" "$text" >> "$zshrc"
      fi
    fi
  fi
}

# test
# append_to_zshrc

die "$0" "$LINENO" "Required 'Homebrew' install has failed ..."

brew_check() {
  # Check for Homebrew install; install as needed; exit on errors
  if ! command -v brew 2>/dev/null; then
    fancy_echo "Installing Homebrew ..."
    /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    if ! command -v brew 2>/dev/null; then
      die "$0" "$LINENO" "Required 'Homebrew' install has failed ..."
    else
      append_to_zshrc '# recommended by brew doctor'
    fi
  fi

  HOMEBREW_PREFIX="$(brew --prefix >/dev/null 2>&1)"
  HOMEBREW_PREFIX="${HOMEBREW_PREFIX:-/usr/local}"

  # shell check disable=SC2016
  append_to_zshrc "export PATH=\"${HOMEBREW_PREFIX}/bin:$PATH\"" 1
  export PATH="${HOMEBREW_PREFIX}/bin:$PATH"

  if ! [ -d "$HOMEBREW_PREFIX" ]; then
    sudo mkdir -p "$HOMEBREW_PREFIX"
    sudo chflags norestricted "$HOMEBREW_PREFIX"
  fi
}

# exit

set -e

mkdir -p "$HOME/.bin"

touch "$HOME/.zshrc"

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'
export PATH="$HOME/.bin:$PATH"

fancy_echo "Repairing permissions on Homebrew folder ..."
sudo chown -R "$(id -un)":admin "$HOMEBREW_PREFIX"

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
  update_shell
fi

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "universal-ctags/universal-ctags"
tap "heroku/brew"

# Unix
brew "universal-ctags", args: ["HEAD"]
brew "git"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "vim"
brew "watchman"
brew "zsh"

# Heroku
brew "heroku/brew/heroku"
brew "parity"

# GitHub
brew "hub"

# Image manipulation
brew "imagemagick"

# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
brew "shellcheck"
brew "yarn"
cask "gpg-suite"

# Databases
brew "postgres", restart_service: :changed
brew "redis", restart_service: :changed
EOF

fancy_echo "Update heroku binary ..."
brew unlink heroku
brew link --force heroku

fancy_echo "Configuring asdf version manager ..."
if [ ! -d "$HOME/.asdf" ]; then
  git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.5.0
  append_to_zshrc "source $HOME/.asdf/asdf.sh" 1
fi

alias install_asdf_plugin=add_or_update_asdf_plugin
add_or_update_asdf_plugin() {
  local name="$1"
  local url="$2"

  if ! asdf plugin-list | grep -Fq "$name"; then
    asdf plugin-add "$name" "$url"
  else
    asdf plugin-update "$name"
  fi
}

# shellcheck source=/dev/null
. "$HOME/.asdf/asdf.sh"
add_or_update_asdf_plugin "ruby" "https://github.com/asdf-vm/asdf-ruby.git"
add_or_update_asdf_plugin "nodejs" "https://github.com/asdf-vm/asdf-nodejs.git"

install_asdf_language() {
  local language="$1"
  local version
  version="$(asdf list-all "$language" | grep -v "[a-z]" | tail -1)"

  if ! asdf list "$language" | grep -Fq "$version"; then
    asdf install "$language" "$version"
    asdf global "$language" "$version"
  fi
}

fancy_echo "Installing latest Ruby ..."
install_asdf_language "ruby"
gem update --system
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

fancy_echo "Installing latest Node ..."
bash "$HOME/.asdf/plugins/nodejs/bin/import-release-team-keyring"
install_asdf_language "nodejs"

if [ -f "$HOME/.laptop.local" ]; then
  fancy_echo "Running your customizations from ~/.laptop.local ..."
  # shellcheck source=/dev/null
  . "$HOME/.laptop.local"
fi
